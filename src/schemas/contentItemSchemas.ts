import { z } from "zod";

const referenceObjectSchema = z
  .object({
    id: z.string().optional(),
    codename: z.string().optional(),
    external_id: z.string().optional(),
  })
  .describe(
    "An object with an id, codename, or external_id property referencing another item. Using id is preferred for better performance.",
  );

const languageVariantElementBaseSchema = z.object({
  element: referenceObjectSchema,
  value: z.any(),
});

const richTextComponentSchema = z.object({
  id: z.string(),
  type: referenceObjectSchema,
  elements: z.array(languageVariantElementBaseSchema),
});

const assetInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.array(referenceObjectSchema).nullable(),
});

const customElementInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.string().nullable(),
  searchable_value: z.string().nullable(),
});

const dateTimeInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.string().nullable(),
  display_timezone: z.string().nullable(),
});

const linkedItemsInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.array(referenceObjectSchema).nullable(),
});

const multipleChoiceInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.array(referenceObjectSchema).nullable(),
});

const numberInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.number().nullable(),
});

const richTextInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.string().nullable(),
  components: z.array(richTextComponentSchema).nullable(),
});

const taxonomyInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.array(referenceObjectSchema).nullable(),
});

const textInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  value: z.string().nullable(),
});

const urlSlugInVariantElementSchema = z.object({
  element: referenceObjectSchema,
  mode: z.enum(["autogenerated", "custom"]),
  value: z.string().nullable(),
});

export const languageVariantElementSchema = z.union([
  // Most specific schemas first (with unique distinguishing fields)
  urlSlugInVariantElementSchema, // has unique required 'mode' field
  richTextInVariantElementSchema, // has unique optional 'components' field
  dateTimeInVariantElementSchema, // has unique nullable 'display_timezone' field
  customElementInVariantElementSchema, // has unique optional 'searchable_value' field
  numberInVariantElementSchema, // has unique value type (number)

  // Medium specificity (array value types)
  assetInVariantElementSchema, // value: array of references
  linkedItemsInVariantElementSchema, // value: array of references
  multipleChoiceInVariantElementSchema, // value: array of references
  taxonomyInVariantElementSchema, // value: array of references

  // Least specific (basic string value, no unique fields)
  textInVariantElementSchema, // value: string, no distinguishing fields
]);
